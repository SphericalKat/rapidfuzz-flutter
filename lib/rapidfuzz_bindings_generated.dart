// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/rapidfuzz.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class RapidfuzzBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RapidfuzzBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RapidfuzzBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  /// Declare your C-compatible functions here
  double ratio(ffi.Pointer<ffi.Char> str1, ffi.Pointer<ffi.Char> str2) {
    return _ratio(str1, str2);
  }

  late final _ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('ratio');
  late final _ratio =
      _ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double partial_ratio(ffi.Pointer<ffi.Char> str1, ffi.Pointer<ffi.Char> str2) {
    return _partial_ratio(str1, str2);
  }

  late final _partial_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('partial_ratio');
  late final _partial_ratio =
      _partial_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double token_sort_ratio(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _token_sort_ratio(str1, str2);
  }

  late final _token_sort_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('token_sort_ratio');
  late final _token_sort_ratio =
      _token_sort_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double token_set_ratio(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _token_set_ratio(str1, str2);
  }

  late final _token_set_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('token_set_ratio');
  late final _token_set_ratio =
      _token_set_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();
}
