// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/rapidfuzz.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class RapidfuzzBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RapidfuzzBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RapidfuzzBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Declare your C-compatible functions here
  double ratio(ffi.Pointer<ffi.Char> str1, ffi.Pointer<ffi.Char> str2) {
    return _ratio(str1, str2);
  }

  late final _ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('ratio');
  late final _ratio =
      _ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double partial_ratio(ffi.Pointer<ffi.Char> str1, ffi.Pointer<ffi.Char> str2) {
    return _partial_ratio(str1, str2);
  }

  late final _partial_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('partial_ratio');
  late final _partial_ratio =
      _partial_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double token_sort_ratio(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _token_sort_ratio(str1, str2);
  }

  late final _token_sort_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('token_sort_ratio');
  late final _token_sort_ratio =
      _token_sort_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();

  double token_set_ratio(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _token_set_ratio(str1, str2);
  }

  late final _token_set_ratioPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
    >
  >('token_set_ratio');
  late final _token_set_ratio =
      _token_set_ratioPtr
          .asFunction<
            double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
          >();
}
